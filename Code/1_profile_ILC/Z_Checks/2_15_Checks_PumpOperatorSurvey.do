/*=========================================================================* 
* Project information at:https://github.com/DevInnovationLab/i-h2o-india/
****** Country: India (Odisha)
****** Purpose: Quality Checks for Pump Operator Survey
****** Created by: DIL
****** Used by:  DIL
****** Input data : 
        //data file generate dby surveycto labelling template do file 
****** Output data : 
****** To run before this code:
       //Survey CTO code template 
****** Language: English
*=========================================================================*/
** In this do file: 
	* This do file exports.....
	
********************************************************************************
*** Inastalling required packages
********************************************************************************

net install ipacheck, all replace from("https://raw.githubusercontent.com/PovertyAction/high-frequency-checks/master")
ipacheck update

********************************************************************************
*** Importing the dataset
********************************************************************************

use "${DataRaw}1_10_Pump_Operator_Survey/1_10_Pump_Operator_Survey.dta", clear //importing the raw data with labels generated by SCTO code (need to specify the location)

* Applying prefix "PO_" to all variables
foreach var of varlist _all {
    rename `var' PO_`var'
}

********************************************************************************
*** Setting the date
********************************************************************************

local datestamp = substr(c(current_date),1,11)


********************************************************************************
*** Checking for duplications
********************************************************************************

* Check for duplicates
isid po_unique_id 

/*
//In case of duplications, run the following:
* Identifying the duplicate responses 
sort po_unique_id
gen dup = cond(_N==1,0,_n)
br if dup>0


* Dropping/recoding the duplicates (as required)

*/

********************************************************************************
*** Checking for submissions before start date and time of survey ()
********************************************************************************

* Generating variable for day of the survey from starttime timestamp
gen po_day = day(dofc(po_starttime))

* Generating variable for the month of the survey from starttime timestamp
gen po_month_num = month(dofc(po_starttime))
//listing the variables if the start date and month is less than the actual start date of survey
list if (po_day</*6*/ & po_month_num</*7*/)	
	 
* Generating variable for submission date from the timestamp of submission
gen submission_date = dofc(po_submissiondate)
format submission_date %td
	 
* Generating variable for end date from endtime timestamp
gen enddate = dofc(po_endtime)
format enddate %td

* Generating variable for start date from the starttime timestamp
gen startdate = dofc(po_starttime)
format startdate %td

* Generating variable for start hour from the time stamp
gen start_hour = hour(clock(po_starttime, "YMDhms"))
replace start_hour = round(start_hour)
format start_hour %02.0f

* Listing the cases where the survey was submitted before the actual starthour and date 
list po_starttime po_unique_id po_village_id if start_hour </*xx*/9 & submission_date == date("", "DMY") //fill in the submission date and start hour based on start of survey

* Listing the cases where startdate > enddate
list po_unique_id po_village_id po_village_name po_enum_name if startdate>enddate

* Listing the cases where starttime >= endtime (if startdate and enddaate are same)
gen double cstart = hh(po_starttime)*3600 + mm(po_starttime)*60
gen double cend = hh(po_endtime)*3600 + mm(po_endtime)*60
list po_unique_id po_village_id po_enum_name if cstart>cend & (startdate == enddate)
list po_unique_id po_village_id po_enum_name if cstart==cend & (startdate == enddate)


********************************************************************************
*** Number of PO Surveys in each village - Total (till today)
********************************************************************************

* Preserving the original dataset
preserve

* Number of surveys by village
bys po_village_name: egen number_surveys = count(po_unique_id)  // total

* Number of cases with consent by village
bys po_village_name: egen consent_yes = count(po_unique_id) if po_consent == 1  // received consent

* Number of cases with no consent by village
bys po_village_name: egen consent_no = count(po_unique_id)  if po_consent == 0  //  NOT receieved consent

* Replacing missing values with 0
foreach var of varlist number_surveys consent_no consent_yes {
	replace `var' = 0 if `var' ==.
}

* Exporting the results to excel 
keep po_village_name number_surveys consent_yes consent_no //retaining required observations
collapse (max) number_surveys consent_yes consent_no , by(po_village_name) //getting the maximum values 
	
export excel using "${DataPre}1_10_Pump_Operator_Survey/HFC_`datestamp'.xlsx", firstrow(variables) sheet(Surveys_Total, modify) sheetreplace cell(A10)

* Restoring the original dataset	
restore
	
* Formatting exported excel results
putexcel set "${DataPre}1_10_Pump_Operator_Survey/HFC_`datestamp'.xlsx", sheet("Surveys_Total") modify
	
//adding titles to the sheets in excel 
putexcel B2:K2 = "HFCs for Pump Operator Survey", merge hcenter bold border("top", "medium", "black")
putexcel B3:K3 = "Number of pump operator surveys conducted per village", merge hcenter  border("bottom", "medium", "black")
putexcel B2:B3, border("left", "medium", "black")
putexcel K2:K3, border("right", "medium", "black")

//labelling the columns
putexcel A10= "Village"
putexcel B10= "Total Submissions"
putexcel C10= "Consent Pump Operators"
putexcel D10= "Non Consent Pump Operators"


********************************************************************************
*** Number of Surveys - Each day
********************************************************************************

* Preserving the original dataset 
preserve

* Number of surveys in each village by enddate 
bys po_village_name enddate: egen number_surveys = count(po_unique_id)  // total

* Number of cases with consent by village and enddate
bys po_village_name enddate: egen consent_yes = count(po_unique_id) if po_consent == 1  // received consent

* Number of cases with consent by village and enddate
bys po_village_name enddate: egen consent_no = count(po_unique_id)  if po_consent == 0  //  NOT received consent
	
* Replacing missing values with zero
foreach var of varlist number_surveys consent_no consent_yes {
	replace `var' = 0 if `var' ==.
}
    
* Exporting the results to excel 
keep po_village_name number_surveys consent_yes consent_no enddate //retaining requiredc variables
rename enddate date //renaming enddate variabl
collapse (max) number_surveys consent_yes consent_no , by(po_village_name date) //gettingmax values for each variable for each village by enddate or survey
order po_village_name date number_surveys consent_yes consent_no //ordering variables

export excel using "${DataPre}1_10_Pump_Operator_Survey/HFC_`datestamp'.xlsx", firstrow(variables) sheet(Surveys_Day-wise, modify) sheetreplace cell(A10)

* Restoring the original dataset 	
restore
		
* Formatting exported excel results
putexcel set "${DataPre}1_10_Pump_Operator_Survey/HFC_`datestamp'.xlsx", sheet("Surveys_Day-wise") modify

//adding titles to the sheets in excel 
putexcel B2:K2 = "HFCs for Pump Operator Survey", merge hcenter bold border("top", "medium", "black")
putexcel B3:K3 = "Number of surveys conducted each day", merge hcenter  border("bottom", "medium", "black")
putexcel B2:B3, border("left", "medium", "black")
putexcel K2:K3, border("right", "medium", "black")

//labelling the columns
putexcel A10= "Village"
putexcel B10= "Total Submissions"
putexcel C10= "Date"
putexcel D10= "Consent Pump Operators"
putexcel E10= "Non Consent Pump Operators"
	

********************************************************************************
*** Number of Surveys by each enumerator - Total (till today)
********************************************************************************

* Preserving the original dataset 
preserve
	
* Number of surveys by enumertor (total)
bys po_enum_name: egen number_surveys = count(po_unique_id)  // total

* Number of cases with consent by enumertor 
bys po_enum_name: egen consent_yes = count(po_unique_id) if po_consent == 1  // received consent 

* Number of cases with no consent by enumerator 
bys po_enum_name: egen consent_no = count(po_unique_id)  if po_consent == 0  // NOT received consent 

* Replaicvng missing values with 0 
foreach var of varlist number_surveys consent_no consent_yes {
	replace `var' = 0 if `var' ==.
}

* Exporting the results to excel 	
keep po_enum_name number_surveys consent_yes consent_no  //retainijng required variables
collapse (max) number_surveys consent_yes consent_no , by(po_enum_name) //getting maximum values
	
export excel using "${DataPre}1_10_Pump_Operator_Survey/HFC_`datestamp'.xlsx", firstrow(variables) sheet(Enumerator_Total, modify) sheetreplace cell(A10)

* Restoring the original dataset	
restore
	
* Formatting exported excel results
putexcel set "${DataPre}1_10_Pump_Operator_Survey/HFC_`datestamp'.xlsx", sheet("Enumerator_Total") modify

//adding titles to the sheets in excel 
putexcel B2:K2 = "HFCs for Pump Operator Survey", merge hcenter bold border("top", "medium", "black")
putexcel B3:K3 = "Number of surveys per enumerator (Total - till today)", merge hcenter  border("bottom", "medium", "black")
putexcel B2:B3, border("left", "medium", "black")
putexcel K2:K3, border("right", "medium", "black")

//labelling the columns
putexcel A10= "Enumerator Name"
putexcel B10= "Total Submissions"
putexcel C10= "Consent Pump Operators"
putexcel D10= "Non Consent Pump Operators"


********************************************************************************
*** Number of Surveys by each enumerator - Each day
********************************************************************************

* Preserving the original dataset 
preserve
	
* Number of surveys in a day by each enumertor 
bys po_enum_name enddate: egen number_surveys = count(po_unique_id)  // total
	
* Exporting the results to excel 
keep po_enum_name number_surveys enddate //retaining required variables 
rename enddate date //renaming the variable 
collapse (max) number_surveys, by(po_enum_name date) //getting max no of surveys for each enumertor for each day

* Reshping the data to get one obs per enumerator 
reshape wide number_surveys, i(po_enum_name) j(date)
local  i 1
foreach var of varlist number_surveys*{
	rename `var' day_`i'
	local ++i
}

* Replacing missig values by zero 
foreach var of varlist day_*{
	replace `var' = 0 if `var' == .
}
	
export excel using "${DataPre}1_10_Pump_Operator_Survey/HFC_`datestamp'.xlsx", firstrow(variables) sheet(Enumerator_Day, modify) sheetreplace cell(A10)
	
* Restoring the original dataset	
restore
	
* Formatting exported excel results
putexcel set "${DataPre}1_10_Pump_Operator_Survey/HFC_`datestamp'.xlsx", sheet("Enumerator_Day") modify

//adding titles to the sheets in excel 
putexcel B2:K2 = "HFCs for Pump Operator Survey", merge hcenter bold border("top", "medium", "black")
putexcel B3:K3 = "Number of surveys per enumerator each day", merge hcenter  border("bottom", "medium", "black")
putexcel B2:B3, border("left", "medium", "black")
putexcel K2:K3, border("right", "medium", "black")

//labelling the columns
putexcel A10= "Enumerator Name"
putexcel B10= "Date"

********************************************************************************
*** Survey Duration of each enumerator
********************************************************************************
* Presevring the dataset
preserve

* Convert start time from timestamp to Stata datetime format
gen start_datetime = clock(po_starttime, "YMDhms")

* Convert end time from timestamp to Stata datetime format
gen end_datetime = clock(po_endtime, "YMDhms")

* Calculate difference in start and endtime in minutes 
gen duration_minutes = (end_datetime - start_datetime) / 60

* Calculating average time taken by each enumertor 
bys po_enum_name: egen enum_duration = mean(duration_minutes)
	
* Exporting the results to excel 
keep po_enum_name enum_duration //retaining only required variables 
duplicates drop po_enum_name, force //dropping duplications to get one obs per enumerator
sort po_enum_name //sorting the data by enumertor 
order po_enum_name enum_duration //ordering the variables 

export excel using "${DataPre}1_10_Pump_Operator_Survey/HFC_`datestamp'.xlsx", firstrow(variables) sheet(Enum_duration, modify) sheetreplace cell(A10)

* Restoring the original dataset
restore
	
* Formatting exported excel results
putexcel set "${DataPre}1_10_Pump_Operator_Survey/HFC_`datestamp'.xlsx", sheet("Enum_duration") modify 

//adding titles to the sheets in excel 
putexcel B2:K2 = "HFCs for Pump Operator Survey", merge hcenter bold border("top", "medium", "black")
putexcel B3:K3 = "Duration by enumerator", merge hcenter  border("bottom", "medium", "black")
putexcel B2:B3, border("left", "medium", "black")
putexcel K2:K3, border("right", "medium", "black")

//labelling the columns
putexcel A10= "Enumerator Name",
putexcel B10= "Duration (in minutes)", txtwrap


********************************************************************************
*** Missing observations for all numeric variables
********************************************************************************

* Preserve the original dataset
preserve	

* Counting the missing values for each numeric var and exporting the results 
ds, has(type numeric) //identifying only numeric variables
local num_vars `r(varlist)' //storing numeric variables in a macro
	ipacheckmissing  `num_vars', 		//counting missing values for each numeric var			///
		outfile("${DataPre}1_10_Pump_Operator_Survey/HFC_`datestamp'.xlsx") 	//saving results				///
		outsheet("Missing_num")							///
		sheetreplace

* Restoring the original dataset
restore

/*Edit as required
// * Formatting exported excel results
// putexcel set "${DataPre}1_10_Pump_Operator_Survey/HFC_`datestamp'.xlsx", sheet("Missing_num") modify 

// //adding titles to the sheets in excel 
// putexcel B2:K2 = "HFCs for Pump Operator Survey", merge hcenter bold border("top", "medium", "black")
// putexcel B3:K3 = "Numeric Variables with missing values", merge hcenter  border("bottom", "medium", "black")
// putexcel B2:B3, border("left", "medium", "black")
// putexcel K2:K3, border("right", "medium", "black")
//
// //labelling the columns
// putexcel A10= "Variable Name",
// putexcel B10= "Number of Missing Values", txtwrap
*/

********************************************************************************
*** Missing observations for all text variables
********************************************************************************

* Preserve the original dataset
preserve	

* Counting the missing values for each text var and exporting the results 
has(type str#) //identifying only string variables (change the string format if required based on data)
local str_vars `r(varlist)' //storing string variables in a macro
	ipacheckmissing  `str_vars', 		//counting missing values for each numeric var			///
		outfile("${DataPre}1_10_Pump_Operator_Survey/HFC_`datestamp'.xlsx") 	//saving results				///
		outsheet("Missing_str")							///
		sheetreplace

* Restoring the original dataset
restore

/*Edit as required
// * Formatting exported excel results
// putexcel set "${DataPre}1_10_Pump_Operator_Survey/HFC_`datestamp'.xlsx", sheet("Missing_str") modify 

// //adding titles to the sheets in excel 
// putexcel B2:K2 = "HFCs for Pump Operator Survey", merge hcenter bold border("top", "medium", "black")
// putexcel B3:K3 = "Numeric Variables with missing values", merge hcenter  border("bottom", "medium", "black")
// putexcel B2:B3, border("left", "medium", "black")
// putexcel K2:K3, border("right", "medium", "black")
//
// //labelling the columns
// putexcel A10= "Variable Name",
// putexcel B10= "Number of Missing Values", txtwrap
*/

********************************************************************************
*** Outliers
********************************************************************************

* Preserve the original dataset
preserve

* Checking the number of outliers for the variables and exporting the results 
local varlist /*list of vars where outliers need to be checked*/
ipacheckoutliers `varlist', id(po_unique_id) enumerator(po_enum_name) ///	
		date(enddate) outfile("${DataPre}1_10_Pump_Operator_Survey/HFC_`datestamp'.xlsx") 	///
			outsheet("Outliers") ///
			sheetreplace

* Restoring the original dataset
restore 


********************************************************************************
*** Percentage of Don't knows in applicable variables
********************************************************************************

preserve
* List of variables where "don't know" is an option
ds /*List of vars with don't know as an option*/

* Loop through each variable
foreach var of varlist `r(varlist)' {
    
    * Count how many times the variable equals 999 (don't know)
    count if `var' == 999
    gen dk_`var' = r(N)
    
    * Summarize total number of observations for the variable
    sum `var'
    gen total_`var' = r(N)
    
    * Calculate proportion of "don't know"
    gen prop_dk_`var' = dk_`var' / total_`var'
    
    * Label the proportion variable
    label var prop_dk_`var' "Proportion: Don't Knows"
}

* Identify variables with "Don't Know" in their labels
findname, all(@==0) varlabeltext(Don*)

* Drop variables identified by findname
drop `r(varlist)'

* Collapse and reshape data
collapse prop_dk_*  total_*
gen id = _n
reshape long prop_dk_ total_, i(id) string  
rename prop_dk DontKnows
rename total_ observations

* Sort data by proportion of "don't know" responses
sort DontKnows observations
gsort DontKnows
label variable _j "Variable"
drop id
drop if DontKnows==.

* Export to Excel
//order the vars

//exporting the results
export excel using "${DataPre}1_10_Pump_Operator_Survey/HFC_`datestamp'.xlsx", firstrow(varlabels) sheet(Number- DontKnows, modify) sheetreplace cell(A10)

* Restore original dataset
restore
	
	
********************************************************************************
*** Percentage of Refused to answer in applicable variables
********************************************************************************

preserve

* List of variables where "refused to answer" is an option
ds /*List of vars with refused to answer as an option*/

* Loop through each variable
foreach var of varlist `r(varlist)' {
    
    * Count how many times the variable equals -98 (refused to answer)
    count if `var' == -98
    gen ref_`var' = r(N)
    
    * Summarize total number of observations for the variable
    sum `var'
    gen total_`var' = r(N)
    
    * Calculate proportion of "refused to answer"
    gen prop_ref_`var' = ref_`var' / total_`var'
    
    * Label the proportion variable
    label var prop_ref_`var' "Proportion: Refused to Answer"
}

* Identify variables with "Refused to answer" in their labels
findname, all(@==0) varlabeltext(ref*)

* Drop variables identified by findname
drop `r(varlist)'

* Collapse and reshape data
collapse prop_ref_* total_*
gen id = _n
reshape long prop_ref_ total_, i(id) string  
rename prop_ref refusals
rename total_ observations

* Sort data by proportion of "refused to answer" responses
sort refusals observations
gsort refusals
label variable _j "Variable"
drop id
drop if refusals==.

* Export to Excel
//order the vars

//exporting teh results
export excel using "${DataPre}1_10_Pump_Operator_Survey/HFC_`datestamp'.xlsx", firstrow(varlabels) sheet(Number- Refusals, modify) sheetreplace cell(A10)

* Restore original dataset
restore


********************************************************************************
*** Percentage of Other in applicable variables - Select One
********************************************************************************

preserve

* List of variables where "Other" is an option
ds /*List of vars with Other as an option*/ , has(type numeric)

* Loop through each variable
foreach var of varlist `r(varlist)' {
    
    * Count how many times the variable equals -77 (other)
    count if `var' == -77
    gen oth_`var' = r(N)
    
    * Summarize total number of observations for the variable
    sum `var'
    gen total_`var' = r(N)
    
    * Calculate proportion of "Other"
    gen prop_oth_`var' = oth_`var' / total_`var'
    
    * Label the proportion variable
    label var prop_oth_`var' "Proportion: Other"
}


	findname, all(@==0) varlabeltext(Oth*)
	drop `r(varlist)'
	collapse prop_oth_* total_*
	gen id = _n
	reshape long prop_oth_ total_, i(id) string
	rename prop_oth_ others
	rename total_ observations
	sum others, det
	label variable _j "Variable"
	drop id
	drop if others==.
	
* Export to Excel
//order the vars

//exporting the results
export excel using "${DataPre}1_10_Pump_Operator_Survey/HFC_`datestamp'.xlsx", firstrow(varlabels) sheet("Number - Others", modify) sheetreplace cell(A10) 

* Restoring the dataset
restore

********************************************************************************
*** Percentage of Other in applicable variables - Select Multiple
********************************************************************************

* Preserving the dataset
preserve

* List of variables where "Other" is an option
ds /*varlist for otehr option in select multiple*/, has (type numeric)

foreach var of varlist `r(varlist)' {
list `var' if `var' == 1
gen _`var' = 1 if `var' == 1
}
collapse (sum) _*

* Export to Excel
//order the vars

//exporting the results
export excel /*varlist*/ if /*varlist==1*/ using "${DataPre}1_10_Pump_Operator_Survey/HFC_`datestamp'.xlsx", firstrow(varlabels) sheet("Number - Multiplechoice Others", modify) sheetreplace cell(A10)

* Restoring the dataset  
restore


