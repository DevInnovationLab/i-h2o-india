/*=========================================================================* 
* Project information at:https://github.com/DevInnovationLab/i-h2o-india/
****** Country: India (Odisha)
****** Purpose: Quality Checks for Pump Operator Survey
****** Created by: DIL
****** Used by:  DIL
****** Input data : 
        //data file generate dby surveycto labelling template do file 
****** Output data : 
****** To run before this code:
       //Survey CTO code template 
****** Language: English
*=========================================================================*/
** In this do file: 
	* This do file exports.....
	
********************************************************************************
*** Inastalling required packages
********************************************************************************

net install ipacheck, all replace from("https://raw.githubusercontent.com/PovertyAction/high-frequency-checks/master")
ipacheck update

********************************************************************************
*** Importing the dataset
********************************************************************************

use "${DataRaw}1_10_Pump_Operator_Survey/pump_operator_survey.dta", clear //importing the raw data with labels generated by SCTO code (need to specify the location)

* Applying prefix "po_" to all variables
foreach var of varlist _all {
    rename `var' po_`var'
}

********************************************************************************
*** Setting the date
********************************************************************************

local datestamp = substr(c(current_date),1,11)


********************************************************************************
*** Checking for duplications
********************************************************************************

* Check for duplicates
isid po_unique_id 

/*
//In case of duplications, run the following:
* Identifying the duplicate responses 
sort po_unique_id
gen dup = cond(_N==1,0,_n)
br if dup>0


* Dropping/recoding the duplicates (as required)

*/

********************************************************************************
*** Checking for submissions before start date and time of survey ()
********************************************************************************

* Generating variable for day of the survey from starttime timestamp
gen po_day = day(dofc(po_starttime))

* Generating variable for the month of the survey from starttime timestamp
gen po_month_num = month(dofc(po_starttime))
//listing the variables if the start date and month is less than the actual start date of survey
list po_unique_id if (po_day<3 | po_month_num<7)	
//one submission (testing) listed
	 
* Generating variable for submission date from the timestamp of submission
gen submission_date = dofc(po_submissiondate)
format submission_date %td
	 
* Generating variable for end date from endtime timestamp
gen enddate = dofc(po_endtime)
format enddate %td

* Generating variable for start date from the starttime timestamp
gen startdate = dofc(po_starttime)
format startdate %td

* Listing the cases where startdate > enddate
list po_unique_id po_village_id po_village_name po_enum_name if startdate>enddate

* Listing the cases where starttime >= endtime (if startdate and enddaate are same)
gen double cstart = hh(po_starttime)*3600 + mm(po_starttime)*60
gen double cend = hh(po_endtime)*3600 + mm(po_endtime)*60
list po_unique_id po_village_id po_enum_name if cstart>cend & (startdate == enddate)
list po_unique_id po_village_id po_enum_name if cstart==cend & (startdate == enddate)

********************************************************************************
*** Corrections
********************************************************************************

* Dropping observations submitted during testing
drop if po_unique_id=="10101103005"
//1 obs dropped

* Changing the Unique ID
//there is only one PO in this village so changing last 3 digits of Unique ID from 002 to 001
replace po_unique_id="40401103001" if po_unique_id=="40401103002"

* Number of hours electricity was a problem
//the constraint in this question does not allow more than 24hrs, so manually changing cases where electricity was gone for more hours 
replace po_no_of_hours=480 if po_unique_id=="30501101001" //electricity supply disrupted for 20 days
replace po_no_of_hours=72 if po_unique_id=="10201103001" //electricity supply disrupted for 3 days


********************************************************************************
*** Number of PO Surveys in each village - Total (till today)
********************************************************************************
* Preserving the original dataset
preserve

* Number of surveys by village
bys po_village_name: egen number_surveys = count(po_unique_id)  // total

* Number of cases with consent by village
bys po_village_name: egen consent_yes = count(po_unique_id) if po_consent == 1  // received consent

* Number of cases with no consent by village
bys po_village_name: egen consent_no = count(po_unique_id)  if po_consent == 0  //  NOT receieved consent

* Replacing missing values with 0
foreach var of varlist number_surveys consent_no consent_yes {
	replace `var' = 0 if `var' ==.
}

* Exporting the results to excel 
keep po_village_name number_surveys consent_yes consent_no //retaining required observations
collapse (max) number_surveys consent_yes consent_no , by(po_village_name) //getting the maximum values 
	
export excel using "${DataPre}1_10_Pump_Operator_Survey/HFC_$S_DATE.xlsx", firstrow(variables) sheet(Surveys_Total, modify) sheetreplace cell(A10)

* Restoring the original dataset	
restore
	
* Formatting exported excel results
putexcel set "${DataPre}1_10_Pump_Operator_Survey/HFC_$S_DATE.xlsx", sheet("Surveys_Total") modify
	
//adding titles to the sheets in excel 
putexcel B2:K2 = "HFCs for Pump Operator Survey", merge hcenter bold border("top", "medium", "black")
putexcel B3:K3 = "Number of pump operator surveys conducted per village", merge hcenter  border("bottom", "medium", "black")
putexcel B2:B3, border("left", "medium", "black")
putexcel K2:K3, border("right", "medium", "black")

//labelling the columns
putexcel A10= "Village"
putexcel B10= "Total Submissions"
putexcel C10= "Consent Pump Operators"
putexcel D10= "Non Consent Pump Operators"


********************************************************************************
*** Number of Surveys - Each day in each village
********************************************************************************

* Preserving the original dataset 
preserve

* Number of surveys in each village by enddate 
bys po_village_name enddate: egen number_surveys = count(po_unique_id)  // total

* Number of cases with consent by village and enddate
bys po_village_name enddate: egen consent_yes = count(po_unique_id) if po_consent == 1  // received consent

* Number of cases with consent by village and enddate
bys po_village_name enddate: egen consent_no = count(po_unique_id)  if po_consent == 0  //  NOT received consent
	
* Replacing missing values with zero
foreach var of varlist number_surveys consent_no consent_yes {
	replace `var' = 0 if `var' ==.
}
    
* Exporting the results to excel 
keep po_village_name number_surveys consent_yes consent_no enddate //retaining requiredc variables
rename enddate date //renaming enddate variabl
collapse (max) number_surveys consent_yes consent_no , by(po_village_name date) //gettingmax values for each variable for each village by enddate or survey
order po_village_name date number_surveys consent_yes consent_no //ordering variables

export excel using "${DataPre}1_10_Pump_Operator_Survey/HFC_$S_DATE.xlsx", firstrow(variables) sheet(Surveys_Day_Village-wise, modify) sheetreplace cell(A10)

* Restoring the original dataset 	
restore
		
* Formatting exported excel results
putexcel set "${DataPre}1_10_Pump_Operator_Survey/HFC_$S_DATE.xlsx", sheet("Surveys_Day_Village-wise") modify

//adding titles to the sheets in excel 
putexcel B2:K2 = "HFCs for Pump Operator Survey", merge hcenter bold border("top", "medium", "black")
putexcel B3:K3 = "Number of surveys conducted each day", merge hcenter  border("bottom", "medium", "black")
putexcel B2:B3, border("left", "medium", "black")
putexcel K2:K3, border("right", "medium", "black")

//labelling the columns
putexcel A10= "Village"
putexcel B10= "Date"
putexcel C10= "Total Submissions"
putexcel D10= "Consent Pump Operators"
putexcel E10= "Non Consent Pump Operators"
	
********************************************************************************
*** Number of Surveys - Each day
********************************************************************************

* Preserving the original dataset 
preserve

* Number of surveys in each village by enddate 
bys po_village_name enddate: egen number_surveys = count(po_unique_id)  // total

* Number of cases with consent by village and enddate
bys po_village_name enddate: egen consent_yes = count(po_unique_id) if po_consent == 1  // received consent

* Number of cases with consent by village and enddate
bys po_village_name enddate: egen consent_no = count(po_unique_id)  if po_consent == 0  //  NOT received consent
	
* Replacing missing values with zero
foreach var of varlist number_surveys consent_no consent_yes {
	replace `var' = 0 if `var' ==.
}
    
* Exporting the results to excel 
keep number_surveys consent_yes consent_no enddate //retaining requiredc variables
rename enddate date //renaming enddate variabl
collapse (count) number_surveys consent_yes , by(date) //gettingmax values for each variable for each village by enddate or survey
order date number_surveys consent_yes //ordering variables

export excel using "${DataPre}1_10_Pump_Operator_Survey/HFC_$S_DATE.xlsx", firstrow(variables) sheet(Surveys_Day-wise, modify) sheetreplace cell(A10)

* Restoring the original dataset 	
restore
		
* Formatting exported excel results
putexcel set "${DataPre}1_10_Pump_Operator_Survey/HFC_$S_DATE.xlsx", sheet("Surveys_Day-wise") modify

//adding titles to the sheets in excel 
putexcel B2:K2 = "HFCs for Pump Operator Survey", merge hcenter bold border("top", "medium", "black")
putexcel B3:K3 = "Number of surveys conducted each day", merge hcenter  border("bottom", "medium", "black")
putexcel B2:B3, border("left", "medium", "black")
putexcel K2:K3, border("right", "medium", "black")

//labelling the columns
putexcel A10= "Date"
putexcel B10= "Total Submissions"
putexcel C10= "Consent Pump Operators"

********************************************************************************
*** Number of Surveys by each enumerator - Total (till today)
********************************************************************************

* Preserving the original dataset 
preserve
	
* Number of surveys by enumertor (total)
bys po_enum_name: egen number_surveys = count(po_unique_id)  // total

* Number of cases with consent by enumertor 
bys po_enum_name: egen consent_yes = count(po_unique_id) if po_consent == 1  // received consent 

* Number of cases with no consent by enumerator 
bys po_enum_name: egen consent_no = count(po_unique_id)  if po_consent == 0  // NOT received consent 

* Replaicvng missing values with 0 
foreach var of varlist number_surveys consent_no consent_yes {
	replace `var' = 0 if `var' ==.
}

* Exporting the results to excel 	
keep po_enum_name number_surveys consent_yes consent_no  //retainijng required variables
collapse (max) number_surveys consent_yes consent_no , by(po_enum_name) //getting maximum values
	
export excel using "${DataPre}1_10_Pump_Operator_Survey/HFC_$S_DATE.xlsx", firstrow(variables) sheet(Enumerator_Total, modify) sheetreplace cell(A10)

* Restoring the original dataset	
restore
	
* Formatting exported excel results
putexcel set "${DataPre}1_10_Pump_Operator_Survey/HFC_$S_DATE.xlsx", sheet("Enumerator_Total") modify

//adding titles to the sheets in excel 
putexcel B2:K2 = "HFCs for Pump Operator Survey", merge hcenter bold border("top", "medium", "black")
putexcel B3:K3 = "Number of surveys per enumerator (Total - till today)", merge hcenter  border("bottom", "medium", "black")
putexcel B2:B3, border("left", "medium", "black")
putexcel K2:K3, border("right", "medium", "black")

//labelling the columns
putexcel A10= "Enumerator Name"
putexcel B10= "Total Submissions"
putexcel C10= "Consent Pump Operators"
putexcel D10= "Non Consent Pump Operators"


********************************************************************************
*** Number of Surveys by each enumerator - Each day
********************************************************************************

* Preserving the original dataset 
preserve
	
* Number of surveys in a day by each enumertor 
bys po_enum_name enddate: egen number_surveys = count(po_unique_id)  // total
	
* Exporting the results to excel 
keep po_enum_name number_surveys enddate //retaining required variables 
rename enddate date //renaming the variable 
collapse (max) number_surveys, by(po_enum_name date) //getting max no of surveys for each enumertor for each day

* Reshping the data to get one obs per enumerator 
reshape wide number_surveys, i(po_enum_name) j(date)
local  i 1
foreach var of varlist number_surveys*{
	rename `var' day_`i'
	local ++i
}

* Replacing missig values by zero 
foreach var of varlist day_*{
	replace `var' = 0 if `var' == .
}
	
export excel using "${DataPre}1_10_Pump_Operator_Survey/HFC_$S_DATE.xlsx", firstrow(variables) sheet(Enumerator_Day, modify) sheetreplace cell(A10)
	
* Restoring the original dataset	
restore
	
* Formatting exported excel results
putexcel set "${DataPre}1_10_Pump_Operator_Survey/HFC_$S_DATE.xlsx", sheet("Enumerator_Day") modify

//adding titles to the sheets in excel 
putexcel B2:K2 = "HFCs for Pump Operator Survey", merge hcenter bold border("top", "medium", "black")
putexcel B3:K3 = "Number of surveys per enumerator each day", merge hcenter  border("bottom", "medium", "black")
putexcel B2:B3, border("left", "medium", "black")
putexcel K2:K3, border("right", "medium", "black")

//labelling the columns
putexcel A10= "Enumerator Name"

********************************************************************************
*** Survey Duration of each enumerator
********************************************************************************
* Presevring the dataset
preserve

* Calculate difference in start and endtime in minutes 
gen duration_minutes = (cend - cstart) / 60

* Calculating average time taken by each enumertor 
bys po_enum_name: egen enum_duration = mean(duration_minutes)
	
* Exporting the results to excel 
keep po_enum_name enum_duration //retaining only required variables 
duplicates drop po_enum_name, force //dropping duplications to get one obs per enumerator
sort po_enum_name //sorting the data by enumertor 
order po_enum_name enum_duration //ordering the variables 

export excel using "${DataPre}1_10_Pump_Operator_Survey/HFC_$S_DATE.xlsx", firstrow(variables) sheet(Enum_duration, modify) sheetreplace cell(A10)

* Restoring the original dataset
restore
	
* Formatting exported excel results
putexcel set "${DataPre}1_10_Pump_Operator_Survey/HFC_$S_DATE.xlsx", sheet("Enum_duration") modify 

//adding titles to the sheets in excel 
putexcel B2:K2 = "HFCs for Pump Operator Survey", merge hcenter bold border("top", "medium", "black")
putexcel B3:K3 = "Duration by enumerator", merge hcenter  border("bottom", "medium", "black")
putexcel B2:B3, border("left", "medium", "black")
putexcel K2:K3, border("right", "medium", "black")

//labelling the columns
putexcel A10= "Enumerator Name",
putexcel B10= "Duration (in minutes)", txtwrap


********************************************************************************
*** Missing observations for all numeric variables
********************************************************************************

* Preserve the original dataset
preserve	

* Counting the missing values for each numeric var and exporting the results 
ds, has(type numeric) //identifying only numeric variables
local num_vars `r(varlist)' //storing numeric variables in a macro
	ipacheckmissing  `num_vars', 	///	
		outfile("${DataPre}1_10_Pump_Operator_Survey/HFC_$S_DATE.xlsx") ///	
		outsheet("Missing_num")							///
		sheetreplace

* Restoring the original dataset
restore

/*Edit as required
// * Formatting exported excel results
// putexcel set "${DataPre}1_10_Pump_Operator_Survey/HFC_$S_DATE.xlsx", sheet("Missing_num") modify 

// //adding titles to the sheets in excel 
// putexcel B2:K2 = "HFCs for Pump Operator Survey", merge hcenter bold border("top", "medium", "black")
// putexcel B3:K3 = "Numeric Variables with missing values", merge hcenter  border("bottom", "medium", "black")
// putexcel B2:B3, border("left", "medium", "black")
// putexcel K2:K3, border("right", "medium", "black")
//
// //labelling the columns
// putexcel A10= "Variable Name",
// putexcel B10= "Number of Missing Values", txtwrap
*/

********************************************************************************
*** Missing observations for all text variables
********************************************************************************

* Preserve the original dataset
preserve	

* Counting the missing values for each text var and exporting the results 
ds, has(type str#) //identifying only string variables (change the string format if required based on data)
local str_vars `r(varlist)' //storing string variables in a macro
	ipacheckmissing  `str_vars', 	///	
		outfile("${DataPre}1_10_Pump_Operator_Survey/HFC_$S_DATE.xlsx") ///
		outsheet("Missing_str")							///
		sheetreplace

* Restoring the original dataset
restore

/*Edit as required
// * Formatting exported excel results
// putexcel set "${DataPre}1_10_Pump_Operator_Survey/HFC_$S_DATE.xlsx", sheet("Missing_str") modify 

// //adding titles to the sheets in excel 
// putexcel B2:K2 = "HFCs for Pump Operator Survey", merge hcenter bold border("top", "medium", "black")
// putexcel B3:K3 = "Numeric Variables with missing values", merge hcenter  border("bottom", "medium", "black")
// putexcel B2:B3, border("left", "medium", "black")
// putexcel K2:K3, border("right", "medium", "black")
//
// //labelling the columns
// putexcel A10= "Variable Name",
// putexcel B10= "Number of Missing Values", txtwrap
*/

********************************************************************************
*** Outliers
********************************************************************************

// * Preserve the original dataset
// preserve
//
// * Checking the number of outliers for the variables and exporting the results 
// local varlist /*list of vars where outliers need to be checked*/
// ipacheckoutliers `varlist', id(po_unique_id) enumerator(po_enum_name) ///	
// 		date(enddate) outfile("${DataPre}1_10_Pump_Operator_Survey/HFC_$S_DATE.xlsx") 	///
// 			outsheet("Outliers") ///
// 			sheetreplace
//
// * Restoring the original dataset
// restore 


********************************************************************************
*** Percentage of Don't knows in applicable variables
********************************************************************************

preserve
rename po_water_supply_not_received po_water_supply_not_rec
* List of variables where "don't know" is an option
ds po_school_level po_tap_connection_hamlet po_water_supply_spread_ham po_tap_connection_hhs ///
po_ilc_refill_unit po_operation_ilc po_salary_payer po_turnoff_duration_unit ///
po_next_po_appointment po_oth_turnoff_device po_contact_no_issues po_tenure po_salary_issue  ///
po_addtl_duties_comp po_water_supply_not_rec po_water_supply_less po_water_supply_issue ///
po_water_supply_issue_solve po_bleaching_powder_added po_other_treatment po_bleaching_powder_tank_23 ///
po_operation_valves po_operation_ilc_lastmonth po_turnoff_device_villager po_turnoff_device_pop


* Loop through each variable
foreach var of varlist `r(varlist)' {
    
    * Count how many times the variable equals 999 (don't know)
    count if `var' == 999
    gen dk_`var' = r(N)
    
    * Summarize total number of observations for the variable
    sum `var'
    gen t_`var' = r(N)
    
}


* Identify variables with "Don't Know" in their labels
findname, all(@==0) varlabeltext(Don*)

* Define a local macro to store identified variable names
local vars_to_drop `r(varlist)'

* Drop variables using the stored macro
foreach var of local vars_to_drop {
    drop `var'
}

* Collapse and reshape data
collapse dk_*  t_*
gen id = _n
reshape long dk_ t_, i(id) string  
rename dk_ DontKnows
rename t_ observations

* Sort data by proportion of "don't know" responses
sort DontKnows observations
gsort DontKnows
label variable _j "Variable"
drop id
drop if DontKnows==.

* Export to Excel
//order the vars

//exporting the results
export excel using "${DataPre}1_10_Pump_Operator_Survey/HFC_$S_DATE.xlsx", firstrow(varlabels) sheet("Number_DontKnows", modify) sheetreplace cell(A10)

* Restore original dataset
restore
	
	
********************************************************************************
*** Percentage of Refused to answer in applicable variables
********************************************************************************
** Applicable only for two questions: gender and level of schooling

// preserve
//
// * List of variables where "refused to answer" is an option
// ds /*List of vars with refused to answer as an option*/
//
// * Loop through each variable
// foreach var of varlist `r(varlist)' {
//    
//     * Count how many times the variable equals -98 (refused to answer)
//     count if `var' == -98
//     gen ref_`var' = r(N)
//    
//     * Summarize total number of observations for the variable
//     sum `var'
//     gen t_`var' = r(N)
//    
// }
//
// * Identify variables with "Don't Know" in their labels
// findname, all(@==0) varlabeltext(ref*)
//
// * Define a local macro to store identified variable names
// local vars_to_drop `r(varlist)'
//
// * Drop variables using the stored macro
// foreach var of local vars_to_drop {
//     drop `var'
// }
//
// * Collapse and reshape data
// collapse ref_* total_*
// gen id = _n
// reshape long ref_ t_, i(id) string  
// rename ref refusals
// rename t_ observations
//
// * Sort data by proportion of "refused to answer" responses
// sort refusals observations
// gsort refusals
// label variable _j "Variable"
// drop id
// drop if refusals==.
//
// * Export to Excel
// //order the vars
//
// //exporting teh results
// export excel using "${DataPre}1_10_Pump_Operator_Survey/HFC_$S_DATE.xlsx", firstrow(varlabels) sheet(Number_Refusals, modify) sheetreplace cell(A10)
//
// * Restore original dataset
// restore


********************************************************************************
*** Percentage of Other in applicable variables - Select One
********************************************************************************

preserve

renpfix po_  //Removing prefix to adjust var length

* List of variables where "Other" is an option
ds job_duration_units appointment_po_person upcoming_training_n tenure_duration_unit next_po_appointment ///
time_spent salary_freq salary_payer interaction_freq notsolve cleaning_tank_freq bleaching_powder_freq operation_valves_who operation_ilc hh_issues_percent, has(type numeric)

* Loop through each variable
foreach var of varlist `r(varlist)' {
    
    * Count how many times the variable equals -77 (other)
    count if `var' == -77
    gen o_`var' = r(N)
    
    * Summarize total number of observations for the variable
    sum `var'
    gen t_`var' = r(N)
    
}

* Identify variables with "Don't Know" in their labels
findname, all(@==0) varlabeltext(Don*)

* Define a local macro to store identified variable names
local vars_to_drop `r(varlist)'

* Drop variables using the stored macro
foreach var of local vars_to_drop {
    drop `var'
}


* Collapse and reshape data
collapse o_* t_*
gen id = _n
reshape long o_ t_, i(id) string
rename o_ others
rename t_ observations
sum others, det
label variable _j "Variable"
drop id
drop if others==.
	
* Export to Excel
//order the vars

//exporting the results
export excel using "${DataPre}1_10_Pump_Operator_Survey/HFC_$S_DATE.xlsx", firstrow(varlabels) sheet("Number_Others", modify) sheetreplace cell(A10) 

* Restoring the dataset
restore

********************************************************************************
*** Percentage of Other in applicable variables - Select Multiple
********************************************************************************

* Preserving the dataset
preserve

renpfix po_  //Removing prefix to adjust var length


ds duties_po__77 addtl_duties_no__77 hh_issues_response__77 hh_issues_type__77 ilc_install_challenge__77 ilc_install_support__77 ilc_monitor_type__77 ilc_satisfied_po__77 ilc_unsatisfied_po__77 ilc_satisfied_village__77 ilc_unsatisfied_village__77 interaction_issues__77 maint_issues__77 oth_turnoff_report__77 other_work_type__77 reason_chlorination__77 turnoff_report__77 water_supply_reason__77, has (type numeric)

foreach var of varlist `r(varlist)' {
list `var' if `var' == 1
gen _`var' = 1 if `var' == 1
}

* Export to Excel
//order the vars

//exporting the results
export excel duties_po_oth hh_issues_response_oth hh_issues_type_other ilc_install_challenge_oth ilc_install_support_oth ilc_satisfied_po_oth ilc_satisfied_village_oth ilc_unsatisfied_village_oth interaction_issues_oth  turnoff_report_oth water_supply_reason_oth if _duties_po__77==1 | _hh_issues_response__77==1 | _hh_issues_type__77==1 | _ilc_install_challenge__77==1 |  _ilc_install_support__77==1 | _ilc_satisfied_po__77==1 | _ilc_satisfied_village__77==1 |  _ilc_unsatisfied_village__77==1 | _interaction_issues__77==1 |   _turnoff_report__77==1 | _water_supply_reason__77==1 using "${DataPre}1_10_Pump_Operator_Survey/HFC_$S_DATE.xlsx", firstrow(varlabels) sheet("MultiplechoiceOth_specify", modify) sheetreplace

collapse (sum) _*
export excel using "${DataPre}1_10_Pump_Operator_Survey/HFC_$S_DATE.xlsx", firstrow(varlabels) sheet("Number - Multiplechoice Oth", modify) sheetreplace 

* Restoring the dataset  
restore

********************************************************************************
*** Renaming audio aduit files
********************************************************************************
** Preserving the original dataset
preserve

** Renaming the variables
rename po_hh_issues_audio HH_issues
rename po_appoint_salary_addtlduties Appointment_Salary

** Renaming the audiofiles and storing them externally on box
foreach var in HH_issues Appointment_Salary {

sctomedia `var', id(po_unique_id) vars(po_enum_name_label) media("${DataRaw}1_10_Pump_Operator_Survey/media/") output("${external}PO_survey/audio_files/`var'") 
}

** Generating new variables recording whether audio for a section is available or not
foreach var in HH_issues Appointment_Salary {

gen `var'_new="Yes" if `var'!=""  
}

** Re-Labelling the  variables before exporting to excel
label var po_unique_id "Unique ID of Respondent"
label var po_village_name "Village"
label var po_enum_name_label "Enumerator's name"

** Keeping only the required variables
//keeping only those obs for which audios are available
keep if HH_issues!="" | Appointment_Salary!=""
keep po_unique_id po_village_name po_enum_name_label HH_issues_new Appointment_Salary_new

** Ordering the variables
order po_unique_id po_enum_name_label po_village_name HH_issues_new Appointment_Salary_new

** Exporting the excel file
export excel using "${external}PO_survey/audio_audit_files.xlsx", firstrow(var) replace

** Restoring the dataset
restore


